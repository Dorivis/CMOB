apply plugin: 'java'
apply plugin: 'com.google.protobuf'
apply plugin: 'jacoco'
apply plugin: 'maven'
apply plugin: 'application'
apply plugin: 'java-library'

buildscript {
    repositories {
        mavenCentral()

    }
    dependencies {
        classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.8'
    }
}

sourceSets {
    src {
        main {
            java {
                srcDirs 'build/generated/source/proto/main/grpc'
                srcDirs 'build/generated/source/proto/main/java'
            }
        }
    }
}

mainClassName = 'MindViewerTest.Main'

repositories {
    flatDir {
        dirs 'libs'
        dirs '../cst/build/libs'
    }
    jcenter()
    mavenCentral()
    maven { 
    	url 'https://jitpack.io'
    }
    maven {
        name "rosjava-github"
        url "https://github.com/rosjava/rosjava_mvn_repo/raw/master"
    }
}

def grpcVersion = '1.39.0'

dependencies {
    implementation 'com.github.CST-Group:cst:36da416'
    implementation 'io.vacco.java-express:java-express:0.2.1'
    implementation 'com.google.code.gson:gson:2.8.6'
    implementation 'com.google.guava:guava:30.1.1-jre'
    implementation 'org.apache.httpcomponents:httpcore:4.4.14'


    compile "io.grpc:grpc-netty:${grpcVersion}"
    compile "io.grpc:grpc-protobuf:${grpcVersion}"
    compile "io.grpc:grpc-stub:${grpcVersion}"
    compile group: 'com.google.protobuf', name: 'protobuf-java-util', version: '3.12.2'
    compile group: 'com.google.guava', name: 'guava', version: '30.1.1-jre'


    compileOnly group: "javax.annotation", name: "javax.annotation-api", version: "1.3.2"
    compileOnly group: "org.jetbrains", name: "annotations", version: "13.0"

    //testImplementation 'org.ros.rosjava_messages:std_msgs:0.5.11'
    //testImplementation 'org.ros.rosjava_messages:rosjava_test_msgs:0.3.0'

}

task uberJar(type: Jar) {
    archiveClassifier = 'full'
    manifest {
      attributes(
        'Class-Path': configurations.compile.collect { it.getName() }.join(' '),
        'Main-Class': mainClassName
      )
    }
    from sourceSets.main.output
    dependsOn configurations.runtimeClasspath
    from {
        configurations.runtimeClasspath.findAll { it.name.endsWith('jar') }.collect { zipTree(it) }
    }
}
artifacts
{
    archives uberJar
}

protobuf {
    protoc {
        artifact = 'com.google.protobuf:protoc:3.12.2'
    }

    plugins {
        grpc {
            artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}"
        }
    }
    generateProtoTasks {
        all()*.plugins {
            grpc {}
        }
    }
}